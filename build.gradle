apply plugin: 'java'
apply plugin: 'eclipse'

configurations {
	pluginjar
	pluginjar_linux_x86
	pluginjar_linux_x86_64
	pluginjar_windows_x86
	pluginjar_windows_x86_64
	pluginjar_macosx_x86
	pluginjar_macosx_x86_64
}

repositories {
	mavenCentral()

	maven {
		url "https://swt-repo.googlecode.com/svn/repo/"
	}
}

project.ext {
	pluginId = "gui"
	pluginName = "GUI"
	pluginVersion = "0.1.12-alpha"	
	pluginDebianVersion = "1"
	pluginDate = new Date()
	pluginAppMinVersion = "0.1.12-alpha"
	pluginRelease = rootProject.ext.applicationRelease
	pluginConflictsWith = ""
	
	pluginVersionSnapshot = rootProject.ext.applicationVersionSnapshot
	pluginVersionFull = "${pluginVersion}${pluginVersionSnapshot}"	
	pluginNeedsOperatingSystemAndArchitecture = true

	pluginDebianDistribution = (project.hasProperty("dist")) ? project.getProperty("dist") : "unstable"
}

dependencies {
	compile		project(":syncany-lib")
	compile		project(":syncany-util")	
	compile		project(":syncany-cli")

	compile		"commons-net:commons-net:2.2"    
	compile		"commons-beanutils:commons-beanutils:1.9.0"
	compile		"org.eclipse.swt:org.eclipse.swt.${getSwtLibrary()}:4.4"
	compile		"net.sf.corn:corn-cps:1.1.2"
	compile		"org.apache.httpcomponents:httpclient:4.3.4"
	compile		"org.simpleframework:simple-xml:2.7.1"
	compile		"com.google.guava:guava:15.0"
	compile 	"commons-io:commons-io:2.4"	

	pluginjar			"commons-net:commons-net:2.2"    
	pluginjar			"commons-beanutils:commons-beanutils:1.9.0"
	pluginjar			"net.sf.corn:corn-cps:1.1.2"
	
	pluginjar_windows_x86		"org.eclipse.swt:org.eclipse.swt.win32.win32.x86:4.4"
	pluginjar_windows_x86_64	"org.eclipse.swt:org.eclipse.swt.win32.win32.x86_64:4.4"
	pluginjar_linux_x86		"org.eclipse.swt:org.eclipse.swt.gtk.linux.x86_64:4.4"
	pluginjar_linux_x86_64		"org.eclipse.swt:org.eclipse.swt.gtk.linux.x86_64:4.4"
	pluginjar_macosx_x86		"org.eclipse.swt:org.eclipse.swt.cocoa.macosx:4.4"
	pluginjar_macosx_x86_64		"org.eclipse.swt:org.eclipse.swt.cocoa.macosx.x86_64:4.4"	

	testCompile		project(path: ":syncany-lib", configuration: "tests")      
	testCompile		project(path: ":syncany-util", configuration: "tests")
	testCompile		"junit:junit:4.9"
}

// Task to determine SWT library ///////////////////////////////////////////////

public String getOs() {
	return System.getProperty('os.name').toLowerCase().split()[0] 	
}

public String getArch() {
	String arch = System.getProperty("os.arch")
	return arch.substring(arch.length()-2, arch.length())
}

public String getOsArch(String os, String arch) {
	return os + "_" + arch
}

public String getOsArch() {
	return getOsArch(getOs(), getArch())
}

public String getSwtLibrary(String os, String arch) {
	String osArch = getOsArch(os, arch)
	String swtJarName;
	
	switch(osArch) {
		case 'windows_86': swtJarName = 'win32.win32.x86'; break;
		case 'windows_64': swtJarName = 'win32.win32.x86_64'; break; 
		case 'linux_86': swtJarName = 'gtk.linux.x86'; break;
		case 'linux_64': swtJarName = 'gtk.linux.x86_64'; break;
		case 'mac_64': swtJarName = 'cocoa.macosx.x86_64'; break; 
		case 'mac_86': swtJarName = 'cocoa.macosx'; break; 
		default: throw new Exception('Unknown OS');
	}
	
	return swtJarName;
}

public String getSwtLibrary() {
	return getSwtLibrary(getOs(), getArch())
}

apply from: 'core/gradle/gradle/plugins.jar.gradle'

// Debian Tasks ////////////////////////////////////////////////////////////////

// TO BE MOVED TO CORE ONCE THEY ARE FINAL

task pluginDebianClean(type: Delete) {
	delete 'build/debian'	
}

task pluginDebian(dependsOn: [clean, pluginDebianClean, pluginJar]) {
	doLast {	
		copy {
			from files("build/libs") 
			into file("build/debian/syncany-plugin-${pluginId}/usr/share/syncany/lib")
		}
		
		copy {
			from files("gradle/debian/debian") 
			into file("build/debian/syncany-plugin-${pluginId}/debian")
		}		
		
		exec {
			workingDir file("build/debian/syncany-plugin-${pluginId}")
			commandLine "debuild -i -us -uc -b".split()
		}		
	}
}

task pluginDebianGui(dependsOn: [clean, pluginDebianClean, pluginJar]) {	
	doLast {	
		String pluginDebianPpaVersion = (!"unstable".equals(pluginDebianDistribution)) ? "~${pluginDebianDistribution}ppa${pluginDebianVersion}" : ""
		String pluginDebianVersionFull = "${pluginVersionFull}".replaceAll("-", ".") + pluginDebianPpaVersion
		String pluginDebianArchitecture = (project.ext.pluginArchitecture == "x86") ? "i386" : "amd64";
	
		copy {
			from files("gradle/debian/syncany-plugin-gui") 
			into file("build/debian/syncany-plugin-gui/debian")
		}
		
		copy {
			from file("gradle/debian/syncany-plugin-gui/debian") 
			include "control"
			expand([
				pluginAppMinVersion: "${pluginAppMinVersion}", 	
				pluginDebianArchitecture: "${pluginDebianArchitecture}",
				pluginMiscDepends: "\${misc:Depends}" // Dirty hack to keep ${misc:Depends} debian variable
			])
			into file("build/debian/syncany-plugin-gui/debian/debian")
		}
		
		copy {
			from files("build/libs") 
			into file("build/debian/syncany-plugin-gui/debian/usr/share/syncany/lib")
		}
		
		exec {
			workingDir file(".")
			commandLine rootProject.file("gradle/debian/makechangelog.pl"), "syncany-plugin-gui", "${pluginDebianDistribution}", "${pluginDebianVersionFull}", file("CHANGELOG.md"), file("build/debian/syncany-plugin-gui/debian/debian/changelog")
		}
				
		exec {
			workingDir file("build/debian/syncany-plugin-gui/debian")
			commandLine "debuild -i -us -uc -b".split()
		}		
	}
}

// Windows Installer ///////////////////////////////////////////////////////////

task exeWithGui(dependsOn: [clean, rootProject.clean, rootProject.installApp, pluginJar]) << {
	def innoSetupDir = new File("${buildDir}/innosetup")

	delete innoSetupDir	
	innoSetupDir.mkdir();	
	
	print buildDir 
	
	copy {
		from("${rootProject.projectDir}/build/install")
		into("${buildDir}/install")
	}
	
	copy {
		from("${rootProject.projectDir}/gradle/innosetup/setup-icon.ico")
		into("${buildDir}/install/syncany")
		rename("setup-icon.ico", "syncany.ico")
	}

	copy {
		from("${buildDir}/libs")
		include("*.jar")
		into("${buildDir}/install/syncany/lib")
	}
		
	copy {
		from("${rootProject.projectDir}/gradle/innosetup/setup-left.bmp")
		from("${rootProject.projectDir}/gradle/innosetup/setup-top.bmp")
		from("${rootProject.projectDir}/gradle/innosetup/setup-info-before.rtf")		
		from("${rootProject.projectDir}/gradle/innosetup/setup-info-after.rtf")		
		from("${rootProject.projectDir}/gradle/innosetup/setup-icon.ico")		
		from("${rootProject.projectDir}/gradle/innosetup/modpath.iss")
		from("${rootProject.projectDir}/gradle/innosetup/code.iss")
		into(innoSetupDir)
	}

	copy {
		from("gradle/innosetup/sygui.vbs")
		into("${buildDir}/install/syncany/bin")
	}
	
	copy {
		from("gradle/innosetup/setup-gui.iss.skel")
		rename("setup-gui.iss.skel", "setup-gui.iss")
		expand([
			applicationVersion: "${applicationVersion}",
			applicationVersionFull: "${applicationVersionFull}",			
		])
		into(innoSetupDir)
	}	

	exec {
		workingDir projectDir
		commandLine "iscc ${innoSetupDir}/setup-gui.iss".split()
	}
}

// GUI Tasks ///////////////////////////////////////////////////////////////////

task(runGui, dependsOn: 'classes', type: JavaExec) {
	main = "org.syncany.gui.Launcher"
	// SWT need -XStartOnFirstThread to run on OSX
	jvmArgs = getOs().startsWith("mac") ? ['-XstartOnFirstThread'] : []	
	classpath = sourceSets.main.runtimeClasspath
}

task(runGuiPython, dependsOn: 'classes', type: JavaExec) {
	main = "org.syncany.gui.Launcher"
	args = ["--tray", "python"]
	// SWT need -XStartOnFirstThread to run on OSX
	jvmArgs = getOs().startsWith("mac") ? ['-XstartOnFirstThread'] : []	
	classpath = sourceSets.main.runtimeClasspath
}
