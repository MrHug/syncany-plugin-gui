apply plugin: 'java'
apply plugin: 'eclipse'

configurations {
	pluginjar
	pluginjar_linux_x86
	pluginjar_linux_x86_64
	pluginjar_windows_x86
	pluginjar_windows_x86_64
	pluginjar_macosx_x86
	pluginjar_macosx_x86_64
}

repositories {
	mavenCentral()

	maven {
		url "https://swt-repo.googlecode.com/svn/repo/"
	}
}

project.ext {
	pluginId = "gui"
	pluginName = "GUI"
	pluginVersion = "0.1.12-alpha"	
	pluginDate = new Date()
	pluginAppMinVersion = "0.1.12-alpha"
	pluginRelease = rootProject.ext.applicationRelease
	pluginConflictsWith = ""
	
	pluginVersionSnapshot = rootProject.ext.applicationVersionSnapshot
	pluginVersionFull = "${pluginVersion}${pluginVersionSnapshot}"	
	pluginNeedsOperatingSystemAndArchitecture = true
}

dependencies {
	compile		project(":syncany-lib")
	compile		project(":syncany-util")	
	compile		project(":syncany-cli")

	compile		"commons-net:commons-net:2.2"    
	compile		"commons-beanutils:commons-beanutils:1.9.0"
	compile		"org.eclipse.swt:org.eclipse.swt.${getSwtLibrary()}:4.4"
	compile		"net.sf.corn:corn-cps:1.1.2"
	compile		"org.apache.httpcomponents:httpclient:4.3.4"
	compile		"org.simpleframework:simple-xml:2.7.1"
	compile		"com.google.guava:guava:15.0"
	compile 	"commons-io:commons-io:2.4"	
	compile		"io.undertow:undertow-websockets-jsr:1.0.15.Final"

	pluginjar			"commons-net:commons-net:2.2"    
	pluginjar			"commons-beanutils:commons-beanutils:1.9.0"
	pluginjar			"net.sf.corn:corn-cps:1.1.2"
	
	pluginjar_windows_x86		"org.eclipse.swt:org.eclipse.swt.win32.win32.x86:4.4"
	pluginjar_windows_x86_64	"org.eclipse.swt:org.eclipse.swt.win32.win32.x86_64:4.4"
	pluginjar_linux_x86		"org.eclipse.swt:org.eclipse.swt.gtk.linux.x86_64:4.4"
	pluginjar_linux_x86_64		"org.eclipse.swt:org.eclipse.swt.gtk.linux.x86_64:4.4"
	pluginjar_macosx_x86		"org.eclipse.swt:org.eclipse.swt.cocoa.macosx:4.4"
	pluginjar_macosx_x86_64		"org.eclipse.swt:org.eclipse.swt.cocoa.macosx.x86_64:4.4"	

	testCompile		project(path: ":syncany-lib", configuration: "tests")      
	testCompile		project(path: ":syncany-util", configuration: "tests")
	testCompile		"junit:junit:4.9"
}

/*
// Windows EXE File ////////////////////////////////////////////////////////////
apply plugin: 'launch4j'
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "edu.sc.seis.gradle:launch4j:1.0.6"
    }
}

project.ext {
	clientExeFileName = "syncany.exe"
}

launch4j {
    mainClassName   = "org.syncany.gui.Launcher"
    icon            = "${rootProject.projectDir}/gradle/innosetup/setup-icon.ico"
    launch4jCmd     = "launch4j"
    outputDir       = "launch4j"
    dontWrapJar     = false
    headerType      = "gui"
    outfile         = "${project.clientExeFileName}"
    
    jreMinVersion   = '1.7.0_10'
    
    copyright       = "Syncany"
    
    initialHeapSize = 512
    maxHeapSize     = 1024
    mutexName       = "syncany-gui"
    windowTitle     = "Syncany Client"
}

// Windows Installer ///////////////////////////////////////////////////////////

task installerGui(dependsOn: ["installApp", "launch4j"]) << {
	def innoSetupDir = new File("${buildDir}/innosetup")

	delete innoSetupDir	
	innoSetupDir.mkdir();	
	
	copy {
		from("${rootProject.projectDir}/gradle/innosetup/setup-left.bmp")
		from("${rootProject.projectDir}/gradle/innosetup/setup-top.bmp")
		from("${rootProject.projectDir}/gradle/innosetup/setup-info-before.rtf")		
		from("${rootProject.projectDir}/gradle/innosetup/setup-info-after.rtf")		
		from("${rootProject.projectDir}/gradle/innosetup/setup-icon.ico")		
		into(innoSetupDir)
	}

	copy {
		from("${rootProject.projectDir}/syncany-gui/build/launch4j/${project.clientExeFileName}")
		into("${rootProject.projectDir}/syncany-gui/build/install/syncany")
	}
	
	copy {
		from("${rootProject.projectDir}/gradle/innosetup/setup.gui.iss.skel")
		rename("setup.gui.iss.skel", "setup.iss")
		expand([
			applicationVersion: "${applicationVersion}",
			applicationVersionFull: "${applicationVersionFull}",			
		])
		into(innoSetupDir)
	}

	exec {
		workingDir rootProject.projectDir
		commandLine "iscc ${innoSetupDir}/setup.iss".split()
	}
}
*/
// Task to determine SWT library ///////////////////////////////////////////////

public String getOs() {
	return System.getProperty('os.name').toLowerCase().split()[0] 	
}

public String getArch() {
	String arch = System.getProperty("os.arch")
	return arch.substring(arch.length()-2, arch.length())
}

public String getOsArch(String os, String arch) {
	return os + "_" + arch
}

public String getOsArch() {
	return getOsArch(getOs(), getArch())
}

public String getSwtLibrary(String os, String arch) {
	String osArch = getOsArch(os, arch)
	String swtJarName;
	
	switch(osArch) {
		case 'windows_86': swtJarName = 'win32.win32.x86'; break;
		case 'windows_64': swtJarName = 'win32.win32.x86_64'; break; 
		case 'linux_86': swtJarName = 'gtk.linux.x86'; break;
		case 'linux_64': swtJarName = 'gtk.linux.x86_64'; break;
		case 'mac_64': swtJarName = 'cocoa.macosx.x86_64'; break; 
		case 'mac_86': swtJarName = 'cocoa.macosx'; break; 
		default: throw new Exception('Unknown OS');
	}
	
	return swtJarName;
}

public String getSwtLibrary() {
	return getSwtLibrary(getOs(), getArch())
}

// syncany-gui tasks
task(runGui, dependsOn: 'classes', type: JavaExec) {
	main = "org.syncany.gui.Launcher"
	//SWT need -XStartOnFirstThread to run on OSX
	jvmArgs = getOs().startsWith("mac") ? ['-XstartOnFirstThread'] : []	
	classpath = sourceSets.main.runtimeClasspath
}

apply from: 'core/gradle/gradle/plugins.jar.gradle'
